// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: piratas.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubmundoService_ComprarPirata_FullMethodName = "/onepiece.SubmundoService/ComprarPirata"
)

// SubmundoServiceClient is the client API for SubmundoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmundoServiceClient interface {
	ComprarPirata(ctx context.Context, in *PirataCapturado, opts ...grpc.CallOption) (*ResultadoCompra, error)
}

type submundoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmundoServiceClient(cc grpc.ClientConnInterface) SubmundoServiceClient {
	return &submundoServiceClient{cc}
}

func (c *submundoServiceClient) ComprarPirata(ctx context.Context, in *PirataCapturado, opts ...grpc.CallOption) (*ResultadoCompra, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultadoCompra)
	err := c.cc.Invoke(ctx, SubmundoService_ComprarPirata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmundoServiceServer is the server API for SubmundoService service.
// All implementations must embed UnimplementedSubmundoServiceServer
// for forward compatibility.
type SubmundoServiceServer interface {
	ComprarPirata(context.Context, *PirataCapturado) (*ResultadoCompra, error)
	mustEmbedUnimplementedSubmundoServiceServer()
}

// UnimplementedSubmundoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubmundoServiceServer struct{}

func (UnimplementedSubmundoServiceServer) ComprarPirata(context.Context, *PirataCapturado) (*ResultadoCompra, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComprarPirata not implemented")
}
func (UnimplementedSubmundoServiceServer) mustEmbedUnimplementedSubmundoServiceServer() {}
func (UnimplementedSubmundoServiceServer) testEmbeddedByValue()                         {}

// UnsafeSubmundoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmundoServiceServer will
// result in compilation errors.
type UnsafeSubmundoServiceServer interface {
	mustEmbedUnimplementedSubmundoServiceServer()
}

func RegisterSubmundoServiceServer(s grpc.ServiceRegistrar, srv SubmundoServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubmundoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubmundoService_ServiceDesc, srv)
}

func _SubmundoService_ComprarPirata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PirataCapturado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmundoServiceServer).ComprarPirata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmundoService_ComprarPirata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmundoServiceServer).ComprarPirata(ctx, req.(*PirataCapturado))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmundoService_ServiceDesc is the grpc.ServiceDesc for SubmundoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmundoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onepiece.SubmundoService",
	HandlerType: (*SubmundoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComprarPirata",
			Handler:    _SubmundoService_ComprarPirata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "piratas.proto",
}

const (
	GobiernoService_ObtenerListaPiratas_FullMethodName = "/onepiece.GobiernoService/ObtenerListaPiratas"
	GobiernoService_ReportarCaptura_FullMethodName     = "/onepiece.GobiernoService/ReportarCaptura"
)

// GobiernoServiceClient is the client API for GobiernoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GobiernoServiceClient interface {
	ObtenerListaPiratas(ctx context.Context, in *SolicitudLista, opts ...grpc.CallOption) (*ListaPiratas, error)
	ReportarCaptura(ctx context.Context, in *ReporteCaptura, opts ...grpc.CallOption) (*ConfirmacionCaptura, error)
}

type gobiernoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGobiernoServiceClient(cc grpc.ClientConnInterface) GobiernoServiceClient {
	return &gobiernoServiceClient{cc}
}

func (c *gobiernoServiceClient) ObtenerListaPiratas(ctx context.Context, in *SolicitudLista, opts ...grpc.CallOption) (*ListaPiratas, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListaPiratas)
	err := c.cc.Invoke(ctx, GobiernoService_ObtenerListaPiratas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gobiernoServiceClient) ReportarCaptura(ctx context.Context, in *ReporteCaptura, opts ...grpc.CallOption) (*ConfirmacionCaptura, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmacionCaptura)
	err := c.cc.Invoke(ctx, GobiernoService_ReportarCaptura_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GobiernoServiceServer is the server API for GobiernoService service.
// All implementations must embed UnimplementedGobiernoServiceServer
// for forward compatibility.
type GobiernoServiceServer interface {
	ObtenerListaPiratas(context.Context, *SolicitudLista) (*ListaPiratas, error)
	ReportarCaptura(context.Context, *ReporteCaptura) (*ConfirmacionCaptura, error)
	mustEmbedUnimplementedGobiernoServiceServer()
}

// UnimplementedGobiernoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGobiernoServiceServer struct{}

func (UnimplementedGobiernoServiceServer) ObtenerListaPiratas(context.Context, *SolicitudLista) (*ListaPiratas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerListaPiratas not implemented")
}
func (UnimplementedGobiernoServiceServer) ReportarCaptura(context.Context, *ReporteCaptura) (*ConfirmacionCaptura, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportarCaptura not implemented")
}
func (UnimplementedGobiernoServiceServer) mustEmbedUnimplementedGobiernoServiceServer() {}
func (UnimplementedGobiernoServiceServer) testEmbeddedByValue()                         {}

// UnsafeGobiernoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GobiernoServiceServer will
// result in compilation errors.
type UnsafeGobiernoServiceServer interface {
	mustEmbedUnimplementedGobiernoServiceServer()
}

func RegisterGobiernoServiceServer(s grpc.ServiceRegistrar, srv GobiernoServiceServer) {
	// If the following call pancis, it indicates UnimplementedGobiernoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GobiernoService_ServiceDesc, srv)
}

func _GobiernoService_ObtenerListaPiratas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudLista)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobiernoServiceServer).ObtenerListaPiratas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GobiernoService_ObtenerListaPiratas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobiernoServiceServer).ObtenerListaPiratas(ctx, req.(*SolicitudLista))
	}
	return interceptor(ctx, in, info, handler)
}

func _GobiernoService_ReportarCaptura_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReporteCaptura)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GobiernoServiceServer).ReportarCaptura(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GobiernoService_ReportarCaptura_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GobiernoServiceServer).ReportarCaptura(ctx, req.(*ReporteCaptura))
	}
	return interceptor(ctx, in, info, handler)
}

// GobiernoService_ServiceDesc is the grpc.ServiceDesc for GobiernoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GobiernoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onepiece.GobiernoService",
	HandlerType: (*GobiernoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObtenerListaPiratas",
			Handler:    _GobiernoService_ObtenerListaPiratas_Handler,
		},
		{
			MethodName: "ReportarCaptura",
			Handler:    _GobiernoService_ReportarCaptura_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "piratas.proto",
}

const (
	MarinaService_ComprarPirata_FullMethodName = "/onepiece.MarinaService/ComprarPirata"
)

// MarinaServiceClient is the client API for MarinaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarinaServiceClient interface {
	ComprarPirata(ctx context.Context, in *PirataCapturado, opts ...grpc.CallOption) (*ResultadoCompra, error)
}

type marinaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarinaServiceClient(cc grpc.ClientConnInterface) MarinaServiceClient {
	return &marinaServiceClient{cc}
}

func (c *marinaServiceClient) ComprarPirata(ctx context.Context, in *PirataCapturado, opts ...grpc.CallOption) (*ResultadoCompra, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResultadoCompra)
	err := c.cc.Invoke(ctx, MarinaService_ComprarPirata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarinaServiceServer is the server API for MarinaService service.
// All implementations must embed UnimplementedMarinaServiceServer
// for forward compatibility.
type MarinaServiceServer interface {
	ComprarPirata(context.Context, *PirataCapturado) (*ResultadoCompra, error)
	mustEmbedUnimplementedMarinaServiceServer()
}

// UnimplementedMarinaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarinaServiceServer struct{}

func (UnimplementedMarinaServiceServer) ComprarPirata(context.Context, *PirataCapturado) (*ResultadoCompra, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComprarPirata not implemented")
}
func (UnimplementedMarinaServiceServer) mustEmbedUnimplementedMarinaServiceServer() {}
func (UnimplementedMarinaServiceServer) testEmbeddedByValue()                       {}

// UnsafeMarinaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarinaServiceServer will
// result in compilation errors.
type UnsafeMarinaServiceServer interface {
	mustEmbedUnimplementedMarinaServiceServer()
}

func RegisterMarinaServiceServer(s grpc.ServiceRegistrar, srv MarinaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarinaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarinaService_ServiceDesc, srv)
}

func _MarinaService_ComprarPirata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PirataCapturado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarinaServiceServer).ComprarPirata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarinaService_ComprarPirata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarinaServiceServer).ComprarPirata(ctx, req.(*PirataCapturado))
	}
	return interceptor(ctx, in, info, handler)
}

// MarinaService_ServiceDesc is the grpc.ServiceDesc for MarinaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarinaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onepiece.MarinaService",
	HandlerType: (*MarinaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComprarPirata",
			Handler:    _MarinaService_ComprarPirata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "piratas.proto",
}
